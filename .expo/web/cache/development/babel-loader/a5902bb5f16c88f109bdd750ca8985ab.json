{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\front-end-react-native-mobilapp\\\\components\\\\Map.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport { Descriptions } from 'antd';\nimport GoogleMapReact from 'google-map-react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport axios from \"axios\";\n\nvar _require = require(\"react-google-maps/lib/components/addons/MarkerWithLabel\"),\n    MarkerWithLabel = _require.MarkerWithLabel;\n\nGeocode.setApiKey(\"AIzaSyDhdSw1QzkXBrYnLSt3EF3izfHEhUj6LMc\");\nGeocode.enableDebug();\n\nvar LocationSearchModal = function (_React$Component) {\n  _inherits(LocationSearchModal, _React$Component);\n\n  var _super = _createSuper(LocationSearchModal);\n\n  function LocationSearchModal() {\n    var _this;\n\n    _classCallCheck(this, LocationSearchModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      link: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        lat: 0,\n        lng: 0\n      }\n    };\n\n    _this.getCity = function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    _this.getArea = function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    _this.getState = function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    _this.onChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.onInfoWindowClose = function (event) {};\n\n    _this.onMarkerDragEnd = function (event) {\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    };\n\n    _this.onPlaceSelected = function (place) {\n      console.log('plc', place);\n\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng();\n\n      console.log('latValue' + latValue);\n      console.log('latvalue', latValue);\n      console.log('lngValue', lngValue);\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LocationSearchModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          _this2.setState({\n            mapPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            },\n            markerPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }, function () {\n            Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(function (response) {\n              _this2.setState({\n                link: \"https://www.latlong.net/c/?lat=\" + position.coords.latitude + \"&long=\" + position.coords.longitude\n              });\n\n              var address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = _this2.getCity(addressArray),\n                  area = _this2.getArea(addressArray),\n                  state = _this2.getState(addressArray);\n\n              console.log('city', city, area, state);\n\n              _this2.setState({\n                address: address ? address : '',\n                area: area ? area : '',\n                city: city ? city : '',\n                state: state ? state : ''\n              });\n            }, function (error) {\n              console.error(error);\n            });\n          });\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser!\");\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var location, trial;\n      return _regeneratorRuntime.async(function handleSubmit$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('sfsd');\n              location = this.state.link;\n              console.log(location);\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('location', location));\n\n            case 6:\n              console.log('saved', location);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](3);\n              console.log(_context.t0);\n\n            case 12:\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('location'));\n\n            case 14:\n              trial = _context.sent;\n              console.log(trial);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[3, 9]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return React.createElement(GoogleMap, {\n          defaultZoom: _this3.state.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 21\n          }\n        }, React.createElement(Marker, {\n          google: _this3.props.google,\n          name: 'Dolores park',\n          draggable: true,\n          onDragEnd: _this3.onMarkerDragEnd,\n          position: {\n            lat: _this3.state.markerPosition.lat,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }\n        }), React.createElement(InfoWindow, {\n          onClose: _this3.onInfoWindowClose,\n          position: {\n            lat: _this3.state.markerPosition.lat + 0.0018,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }\n        }, React.createElement(View, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }\n        }, React.createElement(Text, {\n          style: {\n            padding: 0,\n            margin: 0\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 32\n          }\n        }, _this3.state.address))), React.createElement(Marker, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }\n        }), React.createElement(Autocomplete, {\n          style: {\n            width: '100%',\n            height: '40px',\n            paddingLeft: '16px',\n            marginTop: '2px',\n            marginBottom: '2rem'\n          },\n          onPlaceSelected: _this3.onPlaceSelected,\n          types: ['(regions)'],\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }\n        }));\n      }));\n      return React.createElement(View, {\n        style: {\n          padding: '1rem',\n          margin: '0 auto',\n          maxWidth: 1000\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }\n      }, React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 17\n        }\n      }, \"Google Map\"), React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, \"Find your location ..\"), React.createElement(Descriptions, {\n        bordered: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 17\n        }\n      }, React.createElement(Descriptions.Item, {\n        label: \"City\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }\n      }, this.state.city), React.createElement(Descriptions.Item, {\n        label: \"Area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }\n      }, this.state.area), React.createElement(Descriptions.Item, {\n        label: \"State\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }\n      }, this.state.state), React.createElement(Descriptions.Item, {\n        label: \"Address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }\n      }, this.state.address)), React.createElement(Button, {\n        type: \"submit\",\n        onPress: this.handleSubmit.bind(this),\n        title: \"Save location\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }\n      }), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDhdSw1QzkXBrYnLSt3EF3izfHEhUj6LMc&libraries=places\",\n        loadingElement: React.createElement(View, {\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }\n        }),\n        containerElement: React.createElement(View, {\n          style: {\n            height: this.state.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }\n        }),\n        mapElement: React.createElement(View, {\n          style: {\n            height: \"100%\",\n            width: \"100%\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }\n      }), React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 18\n        }\n      }), React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 18\n        }\n      }));\n    }\n  }]);\n\n  return LocationSearchModal;\n}(React.Component);\n\nexport default LocationSearchModal;","map":{"version":3,"sources":["C:/Users/User/Desktop/front-end-react-native-mobilapp/components/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","Descriptions","GoogleMapReact","axios","require","MarkerWithLabel","setApiKey","enableDebug","LocationSearchModal","state","address","city","area","link","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","address_components","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","AsyncStorage","setItem","getItem","trial","AsyncMap","props","google","padding","margin","width","paddingLeft","marginTop","marginBottom","maxWidth","handleSubmit","bind","Component"],"mappings":"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","sourcesContent":["\r\n\r\nimport React from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport {  Descriptions } from 'antd';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { Button, Text,  View,} from 'react-native';\r\nimport axios from \"axios\";\r\n// import Button from 'react-bootstrap/Button';\r\nconst { MarkerWithLabel } = require(\"react-google-maps/lib/components/addons/MarkerWithLabel\");\r\nGeocode.setApiKey(\"AIzaSyDhdSw1QzkXBrYnLSt3EF3izfHEhUj6LMc\");\r\nGeocode.enableDebug();\r\nclass LocationSearchModal extends React.Component {\r\n    state = {\r\n        address: '',\r\n        city: '',\r\n        area: '',\r\n        state: '',\r\n        link:'',\r\n        zoom: 15,\r\n        height: 400,\r\n        mapPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        },\r\n        markerPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({\r\n                    mapPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    },\r\n                    markerPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    }\r\n                },\r\n                    () => {\r\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\r\n                            response => {\r\n                                // console.log(`https://www.latlong.net/c/?lat=${position.coords.latitude}&long=${position.coords.longitude}`)\r\n                                this.setState({link:`https://www.latlong.net/c/?lat=${position.coords.latitude}&long=${position.coords.longitude}`})\r\n                                const address = response.results[0].formatted_address,\r\n                                    addressArray = response.results[0].address_components,\r\n                                    city = this.getCity(addressArray),\r\n                                    area = this.getArea(addressArray),\r\n                                    state = this.getState(addressArray);\r\n                                console.log('city', city, area, state);\r\n                                this.setState({\r\n                                    address: (address) ? address : '',\r\n                                    area: (area) ? area : '',\r\n                                    city: (city) ? city : '',\r\n                                    state: (state) ? state : '',\r\n                                })\r\n                            },\r\n                            error => {\r\n                                console.error(error);\r\n                            }\r\n                        );\r\n                    })\r\n            });\r\n        } else {\r\n            console.error(\"Geolocation is not supported by this browser!\");\r\n        }\r\n    };\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     if (\r\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\r\n    //         this.state.address !== nextState.address ||\r\n    //         this.state.city !== nextState.city ||\r\n    //         this.state.area !== nextState.area ||\r\n    //         this.state.state !== nextState.state\r\n    //     ) {//\r\n    //         return true\r\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\r\n    //         return false\r\n    //     }\r\n    // }\r\n    getCity = (addressArray) => {\r\n        let city = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n                city = addressArray[i].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n    getArea = (addressArray) => {\r\n        let area = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0]) {\r\n                for (let j = 0; j < addressArray[i].types.length; j++) {\r\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n                        area = addressArray[i].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    getState = (addressArray) => {\r\n        let state = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            for (let i = 0; i < addressArray.length; i++) {\r\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n                    state = addressArray[i].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    onChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n        // console.log(event.target.value)\r\n    };\r\n    onInfoWindowClose = (event) => { };\r\n    onMarkerDragEnd = (event) => {\r\n        let newLat = event.latLng.lat(),\r\n            newLng = event.latLng.lng();\r\n        Geocode.fromLatLng(newLat, newLng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                    addressArray = response.results[0].address_components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n                this.setState({\r\n                    address: (address) ? address : '',\r\n                    area: (area) ? area : '',\r\n                    city: (city) ? city : '',\r\n                    state: (state) ? state : '',\r\n                    markerPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                    mapPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n    onPlaceSelected = (place) => {\r\n        console.log('plc', place);\r\n        const address = place.formatted_address,\r\n            addressArray = place.address_components,\r\n            city = this.getCity(addressArray),\r\n            area = this.getArea(addressArray),\r\n            state = this.getState(addressArray),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n            console.log('latValue'+latValue)\r\n        console.log('latvalue', latValue)\r\n        console.log('lngValue', lngValue)\r\n        // Set these values in the state.\r\n        this.setState({\r\n            address: (address) ? address : '',\r\n            area: (area) ? area : '',\r\n            city: (city) ? city : '',\r\n            state: (state) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n    async handleSubmit () { \r\n        console.log('sfsd')\r\n      var location = this.state.link;\r\n      console.log(location)\r\n     \r\n      try {\r\n        //to save token of logged in user in the storage\r\n     await AsyncStorage.setItem('location',location) \r\n    \r\n     console.log('saved', location)\r\n     }\r\n    catch (e){\r\n    console.log(e)\r\n    }\r\n        //to get token of logged in user in the storage\r\n    const trial = await AsyncStorage.getItem('location')\r\n    console.log(trial)\r\n       \r\n    }\r\n    render() {\r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap\r\n                        defaultZoom={this.state.zoom}\r\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                    >\r\n                        {/* InfoWindow on top of marker */}\r\n                        {/*Marker*/}\r\n                        <Marker\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            draggable={true}\r\n                            onDragEnd={this.onMarkerDragEnd}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                        />\r\n                        <InfoWindow\r\n                            onClose={this.onInfoWindowClose}\r\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\r\n                        >\r\n                            <View>\r\n                               <Text style={{ padding: 0, margin: 0 }}>{this.state.address}</Text>\r\n                                </View>\r\n                        </InfoWindow>\r\n                        <Marker />\r\n                        {/* <MarkerWithLabel\r\n                            position={{ lat: -34.397, lng: 150.644 }}\r\n                            labelAnchor={new google.maps.Point(0, 0)}\r\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\r\n                        >\r\n                            <div>Hello There!</div>\r\n                        </MarkerWithLabel> */}\r\n                        {/* For Auto complete Search Box */}\r\n                        <Autocomplete\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '40px',\r\n                                paddingLeft: '16px',\r\n                                marginTop: '2px',\r\n                                marginBottom: '2rem'\r\n                            }}\r\n                            onPlaceSelected={this.onPlaceSelected}\r\n                            types={['(regions)']}\r\n                        />\r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n        return (\r\n            <View style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\r\n                <h2>Google Map</h2>\r\n                <h3>Find your location ..</h3>\r\n                <Descriptions bordered>\r\n                    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n                </Descriptions>\r\n                <Button  type=\"submit\"  onPress={this.handleSubmit.bind(this)}   title=\"Save location\" />\r\n                <AsyncMap\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDhdSw1QzkXBrYnLSt3EF3izfHEhUj6LMc&libraries=places\"\r\n                    loadingElement={\r\n                        <View style={{ height: `100%` ,width: `100%`}} />\r\n                    }\r\n                    containerElement={\r\n                        <View style={{ height: this.state.height }} />\r\n                    }\r\n                    mapElement={\r\n                        <View style={{ height: `100%`,width: `100%` }} />\r\n                    }\r\n                />\r\n                 <br/>\r\n                 <br/>\r\n            \r\n            </View>\r\n        )\r\n    }\r\n}\r\nexport default LocationSearchModal;"]},"metadata":{},"sourceType":"module"}